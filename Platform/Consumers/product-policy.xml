<!--
    - Policies are applied in the order they appear.
    - Position <base/> inside a section to inherit policies from the outer scope.
    - Comments within policies are not preserved.
-->
<!-- Add policies as children to the <inbound>, <outbound>, <backend>, and <on-error> elements -->
<policies>
    <!-- Throttle, authorize, validate, cache, or transform the requests -->
    <inbound>
        <base />

        <!-- authorise the caller. We know the expected id on the incoing jwt -->
        <!-- Note we are authorising the Cog Services scope. Not great, but libraries like -->
        <!-- Promptflow don't give us any chance to intercept the token -->
        <!-- We could use AI Central to do a switch, but PromptFlow will hopefully improve this soon -->
        <validate-azure-ad-token tenant-id="{{tenantId}}" header-name="Authorization">
            <client-application-ids>
                <application-id>{applicationId}</application-id>
            </client-application-ids>
            <audiences>
                <audience>https://cognitiveservices.azure.com</audience>
            </audiences>
        </validate-azure-ad-token>

        <set-variable name="newDeploymentId" value="@{
            var newId = "";
            var incomingDeploymentId = context.Request.MatchedParameters["deployment-id"];

            {policy-map}

            return newId;
        }" />

        <choose>
            <when condition="@(context.Variables["newDeploymentId"] == "")">
                <return-response>
                    <set-status code="404" reason="No such deployment" />
                </return-response>
            </when>
        </choose>

        <set-variable name="newBackendPoolId" value="@{
            var newId = "";
            var incomingDeploymentId = context.Request.MatchedParameters["deployment-id"];

            {policy-pool-map}

            return newId;
        }" />

        <choose>
        {rate-limiting-section}
        </choose>

        <set-variable name="newUrl" value="@(context.Operation.UrlTemplate.Replace("/{deployment-id}/", "/" + (string)context.Variables["newDeploymentId"] + "/"))" />
        <rewrite-uri template="@((string)context.Variables["newUrl"])" copy-unmatched-params="true" />
        <set-backend-service id="apim-generated-policy" backend-id="@((string)context.Variables["newBackendPoolId"])" />

    </inbound>
    <!-- Control if and how the requests are forwarded to services  -->
    <backend>
        <base />
    </backend>
    <!-- Customize the responses -->
    <outbound>
        <base />
    </outbound>
    <!-- Handle exceptions and customize error responses  -->
    <on-error>
        <base />
    </on-error>
</policies>